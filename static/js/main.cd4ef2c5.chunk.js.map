{"version":3,"sources":["logo.svg","components/YtBg.js","components/YtBox.js","js_func/js_fuctions.js","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["YtBg","YtBox","className","videoId","aspectRatio","overlay","nocookie","opts","height","width","playerVars","modestbranding","start","end","autoplay","mute","listType","list","loop","onReady","e","console","log","target","setPlaybackQuality","setVolume","playVideo","onEnd","onPlay","currentTime","getCurrentTime","tmp_vid","getVideoUrl","split","String","seekTo","onPause","onError","onStateChange","onPlaybackRateChange","onPlaybackQualityChange","CountDownTimer","dt","sdt1","Date","sdt","_minute","_second","_hour","_day","now","distance","full_distance","past_distance","days","Math","floor","hours","minutes","seconds","days_per","timeresult1","timeresult2","toFixed","timeresult3","Timer","useState","js_func","contdown1","setContdown1","contdown2","setContdown2","onClick","preventDefault","val","t","document","createElement","body","appendChild","value","select","execCommand","removeChild","alert","timeout","enabled","callback","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cd4ef2c5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { render } from \"@testing-library/react\";\r\nimport logo from '../logo.svg';\r\nimport YoutubeBackground from 'react-youtube-background';\r\n\r\nfunction YtBg() {\r\n    \r\n    let videoId='v4xZUr0BEfE';\r\n    let aspectRatio=\"16:9\";            /* default -> \"16:9\" */\r\n    let overlay=\"rgba(0,0,0,.4)\";                /* default -> null | e.g. \"rgba(0,0,0,.4)\" */\r\n    let className=null;              /* default -> null */\r\n    let nocookie=false;                 /* default -> false | sets host to https:/*www.youtube-nocookie.com to avoid loading Google's cookies */\r\n    //let playerOptions={loop:1,start:65,end:349};          /* default -> {};  | https://developers.google.com/youtube/player_parameters*/\r\n    let playerOptions={start:65,end:349,controls:1};\r\n    const onReady=(e)=> {\r\n        \r\n        e.target.playVideo();\r\n       };                  /* default -> null | returns event with player object */\r\n    const onStateChange = (e) => {\r\n        // const duration = e.target.getDuration();\r\n        const currentTime = e.target.getCurrentTime();\r\n        \r\n        \r\n        e.target.setVolume(50);\r\n        if (currentTime > 349) {\r\n            e.target.seekTo(65);\r\n            // e.target.unMute();\r\n        }\r\n  \r\n    };       \r\n    const onPause=(e) => {\r\n\r\n        \r\n    };                         /* default -> null | returns event with player object */\r\n\r\n\r\n\r\n    const Pausebtn=(e) => {\r\n        e.target.unMute();\r\n        \r\n    };\r\n\r\n\r\n    return(\r\n        \r\n            <YoutubeBackground className=\"youtube_layer\"\r\n            videoId={videoId}                /* default -> null */\r\n            aspectRatio={aspectRatio}            /* default -> \"16:9\" */\r\n            overlay={null}                /* default -> null | e.g. \"rgba(0,0,0,.4)\" */\r\n            className={className}              /* default -> null */\r\n            nocookie={nocookie}                 /* default -> false | sets host to https:/*www.youtube-nocookie.com to avoid loading Google's cookies */\r\n            playerOptions={playerOptions}          /* default -> {}  | https://developers.google.com/youtube/player_parameters*/\r\n            onReady={(e) => onReady(e)}                  /* default -> null | returns event with player object */\r\n            onEnd={null}                    /* default -> null | returns event with player object */\r\n            onPlay={null}                   /* default -> null | returns event with player object */\r\n            onPause={(e) => onPause(e)}                  /* default -> null | returns event with player object */\r\n            onError={null}                  /* default -> null | returns event with player object */\r\n            onStateChange={(e) => onStateChange(e)}            /* default -> null | returns event with player object */\r\n            onPlaybackRateChange={null}     /* default -> null | returns event with player object */\r\n            onPlaybackQualityChange={null}  /* default -> null | returns event with player object */\r\n            >\r\n                <div className=\"Insec-timer\"> </div>\r\n                \r\n                \r\n                \r\n            </YoutubeBackground>\r\n        \r\n            \r\n        \r\n\r\n\r\n    );\r\n}\r\n\r\nexport default YtBg;\r\n","import { render } from \"@testing-library/react\";\r\nimport logo from '../logo.svg';\r\nimport YouTube from 'react-youtube';\r\n// https://github.com/tjallingt/react-youtube\r\n\r\n\r\nfunction YtBox() {\r\n    \r\n    let videoId='v4xZUr0BEfE';    //v4xZUr0BEfE\r\n    let aspectRatio=\"16:9\";            /* default -> \"16:9\" */\r\n    let overlay=\"rgba(0,0,0,.0)\";                /* default -> null | e.g. \"rgba(0,0,0,.4)\" */\r\n    let className=null;              /* default -> null */\r\n    let nocookie=false;                 /* default -> false | sets host to https:/*www.youtube-nocookie.com to avoid loading Google's cookies */\r\n    //let playerOptions={loop:1,start:65,end:349};          /* default -> {};  | https://developers.google.com/youtube/player_parameters*/\r\n    let opts={\r\n        \r\n        height: '100%',\r\n        width: '100%',\r\n        playerVars:{modestbranding:1,start:65,end:349,autoplay: 1,mute:1,listType: 'playlist',list: 'PLtQPyAS-2wdsWqq4F3OL6AaN0Hr0WUrEq',loop:1}\r\n    };\r\n    const onReady=(e)=> {\r\n        console.log('onReady');\r\n        e.target.setPlaybackQuality('hd1080'); //small,medium,large,hd720,hd1080,highres,default\r\n        e.target.setVolume(50);\r\n        e.target.playVideo();\r\n       };                  /* default -> null | returns event with player object */\r\n\r\n    const onPlay=(e)=> {\r\n        const currentTime = e.target.getCurrentTime();\r\n        let tmp_vid=e.target.getVideoUrl().split(\"&v=\")[1];\r\n        console.log('onPlay');\r\n        \r\n        // e.target.unMute(); Youtube api can't autoplay with unmute\r\n        if(String(tmp_vid)=='v4xZUr0BEfE'){\r\n            if (currentTime < 65) {\r\n                e.target.seekTo(65);\r\n                \r\n            }\r\n        }        \r\n        e.target.playVideo();\r\n    };                  /* default -> null | returns event with player object */\r\n    \r\n    const onStateChange = (e) => {\r\n        // const duration = e.target.getDuration();\r\n        const currentTime = e.target.getCurrentTime();\r\n        console.log('onStateChange');\r\n        //e.target.setVolume(50);\r\n\r\n  \r\n    };       \r\n    const onPause=(e) => {\r\n\r\n        \r\n    };                         /* default -> null | returns event with player object */\r\n\r\n    return(\r\n            <div className=\"videoContainer\">\r\n                <YouTube \r\n                videoId={videoId}                /* default -> null */\r\n                aspectRatio={aspectRatio}            /* default -> \"16:9\" */\r\n                overlay={overlay}                /* default -> null | e.g. \"rgba(0,0,0,.4)\" */\r\n                className={className}              /* default -> null */\r\n                nocookie={nocookie}                 /* default -> false | sets host to https:/*www.youtube-nocookie.com to avoid loading Google's cookies */\r\n                opts={opts}          /* default -> {}  | https://developers.google.com/youtube/player_parameters*/\r\n                onReady={(e) => onReady(e)}                  /* default -> null | returns event with player object */\r\n                onEnd={null}                    /* default -> null | returns event with player object */\r\n                onPlay={onPlay}                   /* default -> null | returns event with player object */\r\n                onPause={(e) => onPause(e)}                  /* default -> null | returns event with player object */\r\n                onError={null}                  /* default -> null | returns event with player object */\r\n                onStateChange={(e) => onStateChange(e)}            /* default -> null | returns event with player object */\r\n                onPlaybackRateChange={null}     /* default -> null | returns event with player object */\r\n                onPlaybackQualityChange={null}  /* default -> null | returns event with player object */\r\n                >\r\n                </YouTube>\r\n            </div>\r\n        // </div>\r\n        \r\n        \r\n\r\n\r\n    );\r\n}\r\n\r\nexport default YtBox;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nexport function CountDownTimer(dt,sdt1)\r\n{\r\n    var end = new Date(dt);\r\n    var sdt= new Date(sdt1);\r\n\r\n    var _second = 1000;\r\n    var _minute = _second * 60;\r\n    var _hour = _minute * 60;\r\n    var _day = _hour * 24;\r\n    var timer;\r\n    //var timeresult;\r\n\r\n    // function showRemaining() {\r\n    var now = new Date();\r\n    var distance = end - now;\r\n    var full_distance = end - sdt;\r\n    var past_distance = now - sdt;\r\n    var expiredstr='EXPIRED!';\r\n\r\n    if (distance < 0) {\r\n        //clearInterval(timer);\r\n        return expiredstr;\r\n    }\r\n\r\n    var days = Math.floor(distance / _day);\r\n    var hours = Math.floor((distance % _day) / _hour);\r\n    var minutes = Math.floor((distance % _hour) / _minute);\r\n    var seconds = Math.floor((distance % _minute) / _second);\r\n    //지나온 일수 x 100 / 전체일수\r\n    var days_per = (((past_distance/(24*60*60*1000))*100)/(full_distance/(24*60*60*1000)));\r\n\r\n    \r\n\r\n    // var timeresult= days + '일 ' + hours + '시간 ' + minutes + '분 ' + seconds + '초' + ' / ' + days_per.toFixed(3)+'%';\r\n    var timeresult1= days + '일 ' + hours + '시간 ' + minutes + '분 ' + seconds + '초';\r\n    var timeresult2= days_per.toFixed(3)+'%';\r\n    var timeresult3= days + '일 ' + hours + '시간 ' + minutes + '분 ' + seconds + '초 ' + days_per.toFixed(3)+'%';\r\n    // return timeresult;\r\n    return {\r\n        timeresult1: timeresult1,\r\n        timeresult2: timeresult2,\r\n        timeresult3: timeresult3\r\n    };\r\n\r\n\r\n}\r\n\r\n\r\n//CountDownTimer('03/02/2022 06:00 PM','06/01/2020 09:00 AM')+'남음'\r\n\r\n\r\nexport function copyToClipboard(val) {\r\n    var t = document.createElement(\"textarea\");\r\n    document.body.appendChild(t);\r\n    t.value = val;\r\n    t.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(t);\r\n}\r\n","import { render } from \"@testing-library/react\";\r\nimport logo from '../logo.svg';\r\nimport * as js_func from \"../js_func/js_fuctions.js\";\r\nimport React, { useState,useRef,useEffect } from 'react';\r\nimport ReactInterval from 'react-interval';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n// https://github.com/nkbt/react-works/tree/master/packages/interval\r\n\r\nfunction Timer () {\r\n    \r\n    const [contdown1, setContdown1] = useState(js_func.CountDownTimer('03/02/2022 06:00 PM','06/01/2020 09:00 AM').timeresult1);\r\n    const [contdown2, setContdown2] = useState(js_func.CountDownTimer('03/02/2022 06:00 PM','06/01/2020 09:00 AM').timeresult2);\r\n    \r\n    function timecopy(e) {\r\n      e.preventDefault();\r\n      js_func.copyToClipboard(js_func.CountDownTimer('03/02/2022 06:00 PM','06/01/2020 09:00 AM').timeresult3);\r\n      alert('복사 됨');\r\n    }\r\n    \r\n      return (\r\n        // <div>\r\n            <div className=\"Timer\" onClick={timecopy}>\r\n                \r\n            {contdown1}\r\n                <ReactInterval timeout={1000} enabled={true}\r\n                callback={() => {setContdown1(js_func.CountDownTimer('03/02/2022 06:00 PM','06/01/2020 09:00 AM').timeresult1);\r\n                }} />\r\n                <br/>\r\n            {contdown2}\r\n                <ReactInterval timeout={1000} enabled={true}\r\n                callback={() => {setContdown2(js_func.CountDownTimer('03/02/2022 06:00 PM','06/01/2020 09:00 AM').timeresult2);\r\n                }} />\r\n\r\n                \r\n            </div>\r\n        // </div>\r\n      );\r\n}\r\n\r\n\r\nexport default Timer;","import logo from './logo.svg';\nimport YtBg from './components/YtBg.js';\nimport YtBox from './components/YtBox.js';\nimport './App.css';\nimport YoutubeBackground from 'react-youtube-background';\nimport Youtube from 'react-youtube';\nimport Timer from './components/Timer.js';\nimport * as js_func from \"./js_func/js_fuctions.js\";\n\n\n\n\nfunction App() {\n  \n  \n  return (\n    <div className=\"App\">\n      {}\n\n      <Timer></Timer>\n      <YtBox></YtBox>\n      \n    </div>\n    \n  );\n}\n\n\n\n\n\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}